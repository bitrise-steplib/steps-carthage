package cachedcarthage

import (
	"github.com/bitrise-io/go-utils/env"
	"github.com/stretchr/testify/mock"
	"io"

	"github.com/bitrise-io/go-steputils/stepconf"
	"github.com/bitrise-io/go-utils/command"
)

type CommandBlueprint struct {
	Command string
	Arguments []string
}

// MockCommandBuilder is an autogenerated mock type for the CommandBuilder type
type MockCommandBuilder struct {
	mock.Mock
}

// AddGitHubToken provides a mock function with given fields: githubToken
func (m *MockCommandBuilder) AddGitHubToken(githubToken stepconf.Secret) CommandBuilder {
	args := m.Called(githubToken)
	return args.Get(0).(CommandBuilder)
}

// AddXCConfigFile provides a mock function with given fields: path
func (m *MockCommandBuilder) AddXCConfigFile(path string) CommandBuilder {
	args := m.Called(path)
	return args.Get(0).(CommandBuilder)
}

// Append provides a mock function with given fields: args
func (m *MockCommandBuilder) Append(args ...string) CommandBuilder {
	ret := m.Called(args)
	return ret.Get(0).(CommandBuilder)
}

// Command provides a mock function with given fields:
func (m *MockCommandBuilder) Command(stdout io.Writer, stderr io.Writer) command.Command {
	args := m.Called(stdout, stderr)
	return args.Get(0).(command.Command)
}

func (m *MockCommandBuilder) GivenAddGitHubTokenSucceeds() *MockCommandBuilder {
	m.On("AddGitHubToken", mock.Anything).Return(m)
	return m
}

func (m *MockCommandBuilder) GivenAddXCConfigFileSucceeds() *MockCommandBuilder {
	m.On("AddXCConfigFile", mock.Anything).Return(m)
	return m
}

func (m *MockCommandBuilder) GivenAppendSucceeds() *MockCommandBuilder {
	m.On("Append", mock.Anything).Return(m)
	return m
}

func (m *MockCommandBuilder) GivenCommandReturned(blueprint CommandBlueprint) *MockCommandBuilder {
	command := command.NewFactory(env.NewRepository()).Create(blueprint.Command, blueprint.Arguments, nil)

	m.On("Command", mock.Anything, mock.Anything).Return(command)
	return m
}

func (m *MockCommandBuilder) GivenCommandsReturned(commandBlueprints []CommandBlueprint) *MockCommandBuilder {
	index := 0

	call := m.On("Command", mock.Anything, mock.Anything)
	call.RunFn = func(args mock.Arguments) {
		blueprint := commandBlueprints[index]
		command := command.NewFactory(env.NewRepository()).Create(blueprint.Command, blueprint.Arguments, &command.Opts{
			Stdout: args[0].(io.Writer),
			Stderr: args[1].(io.Writer),
		})
		call.ReturnArguments = mock.Arguments{command, nil}

		index++
	}

	return m
}
