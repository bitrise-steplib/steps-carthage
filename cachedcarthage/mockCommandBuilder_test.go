package cachedcarthage

import (
	mock "github.com/stretchr/testify/mock"

	stepconf "github.com/bitrise-io/go-steputils/stepconf"
	"github.com/bitrise-io/go-utils/command"
)

// MockCommandBuilder is an autogenerated mock type for the CommandBuilder type
type MockCommandBuilder struct {
	mock.Mock
}

// AddGitHubToken provides a mock function with given fields: githubToken
func (m *MockCommandBuilder) AddGitHubToken(githubToken stepconf.Secret) CommandBuilder {
	ret := m.Called(githubToken)

	var r0 CommandBuilder
	if rf, ok := ret.Get(0).(func(stepconf.Secret) CommandBuilder); ok {
		r0 = rf(githubToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(CommandBuilder)
		}
	}

	return r0
}

// Append provides a mock function with given fields: args
func (m *MockCommandBuilder) Append(args ...string) CommandBuilder {
	_va := make([]interface{}, len(args))
	for _i := range args {
		_va[_i] = args[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := m.Called(_ca...)

	var r0 CommandBuilder
	if rf, ok := ret.Get(0).(func(...string) CommandBuilder); ok {
		r0 = rf(args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(CommandBuilder)
		}
	}

	return r0
}

// Command provides a mock function with given fields:
func (m *MockCommandBuilder) Command() *command.Model {
	ret := m.Called()

	var r0 *command.Model
	if rf, ok := ret.Get(0).(func() *command.Model); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*command.Model)
		}
	}

	return r0
}

func (m *MockCommandBuilder) GivenAddGitHubTokenSucceeds() *MockCommandBuilder {
	m.On("AddGitHubToken", mock.Anything).Return(m)
	return m
}

func (m *MockCommandBuilder) GivenAppendSucceeds() *MockCommandBuilder {
	m.On("Append", mock.Anything).Return(m)
	return m
}

func (m *MockCommandBuilder) GivenCommandReturned(command *command.Model) *MockCommandBuilder {
	m.On("Command").Return(command)
	return m
}
