package cachedcarthage

import (
	mock "github.com/stretchr/testify/mock"

	stepconf "github.com/bitrise-io/go-steputils/stepconf"
	"github.com/bitrise-io/go-utils/command"
)

// MockCommandBuilder is an autogenerated mock type for the CommandBuilder type
type MockCommandBuilder struct {
	mock.Mock
}

// AddGitHubToken provides a mock function with given fields: githubToken
func (m *MockCommandBuilder) AddGitHubToken(githubToken stepconf.Secret) CommandBuilder {
	args := m.Called(githubToken)
	return args.Get(0).(CommandBuilder)
}

// AddXCConfigFile provides a mock function with given fields: path
func (m *MockCommandBuilder) AddXCConfigFile(path string) CommandBuilder {
	args := m.Called(path)
	return args.Get(0).(CommandBuilder)
}

// Append provides a mock function with given fields: args
func (m *MockCommandBuilder) Append(args ...string) CommandBuilder {
	ret := m.Called(args)
	return ret.Get(0).(CommandBuilder)
}

// Command provides a mock function with given fields:
func (m *MockCommandBuilder) Command() *command.Model {
	args := m.Called()
	return args.Get(0).(*command.Model)
}

func (m *MockCommandBuilder) GivenAddGitHubTokenSucceeds() *MockCommandBuilder {
	m.On("AddGitHubToken", mock.Anything).Return(m)
	return m
}

func (m *MockCommandBuilder) GivenAddXCConfigFileSucceeds() *MockCommandBuilder {
	m.On("AddXCConfigFile", mock.Anything).Return(m)
	return m
}

func (m *MockCommandBuilder) GivenAppendSucceeds() *MockCommandBuilder {
	m.On("Append", mock.Anything).Return(m)
	return m
}

func (m *MockCommandBuilder) GivenCommandReturned(command *command.Model) *MockCommandBuilder {
	m.On("Command").Return(command)
	return m
}
